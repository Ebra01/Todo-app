{"version":3,"sources":["components/Navbar.js","components/Todos/TodoSummary.js","components/Todos/TodoList.js","components/actions/CreateTodo.js","components/Todos/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","TodoSummary","todo","onTodoUpdate","onTodoDelete","content","finished","toString","onClick","a","body","fetch","id","method","headers","JSON","stringify","ok","TodoList","todos","setTodos","map","key","todoList","filter","t","updatedTodoList","sort","t1","t2","updateTodos","deleteTodos","CreateTodo","onNewTodo","useState","setContent","onSubmit","e","preventDefault","htmlFor","type","placeholder","value","onChange","target","Todos","useEffect","then","resp","json","data","view","OnNewTodo","App","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05ca7c7e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\nexport const Navbar = () => {\n\n  return (\n    <nav className=\"nav-wrapper grey darken-3\">\n      <div className=\"container\">\n        <Link to='/' className='brand-logo center'>ToDo's</Link>\n      </div>\n    </nav>\n  )\n\n}","import React from 'react';\n\n\nexport const TodoSummary = ({todo, onTodoUpdate, onTodoDelete }) => {\n\n  return (\n    <div className=\"card z-depth-0\">\n      <div className=\"card-content blue lighten-4 text-darken-3\">\n        <span className=\"card-title\">{todo.content}</span>\n        <p>Finished: {todo.finished.toString()}</p>\n        <div className=\"container\">\n          <button className=\"btn blue darken-2 btn-margin\" onClick={\n            async () => {\n              const body = {content: todo.content, finished: true};\n              const response = await fetch('/api/todos'+todo.id, {\n                method: \"PATCH\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  \"Accept\": \"application/json\"\n                },\n                body: JSON.stringify(body)\n              });\n              if (response.ok) {\n                onTodoUpdate(todo)\n              }\n            }}>Update</button>\n\n          <button className=\"btn red accent-4 btin-margin\" onClick={\n            async () => {\n              const response = await fetch('/api/todos'+todo.id, {\n                method: \"DELETE\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  \"Accept\": \"application/json\"\n                }\n              });\n              if (response.ok) {\n                onTodoDelete(todo)\n              }\n            }\n          }>Delete</button>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport { TodoSummary } from './TodoSummary';\n\n\nexport const TodoList = ({ todos, setTodos }) => {\n\n  const updateTodos = (todo) => {\n    const todoList = todos.filter(t => {\n      return t.id === todo.id ? false : true\n    });\n\n    todo.finished = true;\n    const updatedTodoList = [...todoList, todo]\n    \n    updatedTodoList.sort((t1, t2) => (t1.id > t2.id) ? 1 : -1)\n\n    setTodos(updatedTodoList);\n  }\n\n  const deleteTodos = (todo) => {\n    const todoList = todos.filter(t =>{\n      return t.id === todo.id ? false : true\n    });\n\n    setTodos(todoList);\n  }\n\n  return (\n    <div>\n      <ul>\n        { todos && todos.map(todo => {\n          return (\n            <li className=\"section\" key={todo.id}>\n              <TodoSummary todo={todo} onTodoUpdate={todo => updateTodos(todo)} onTodoDelete={todo => deleteTodos(todo)} />\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n\n}","import React, { useState } from 'react';\n\n\nexport const CreateTodo = ({onNewTodo }) => {\n  const [content, setContent] = useState(\"\");\n  const finished = false;\n\n  return (\n      <form className=\"white\" onSubmit={ \n        async (e) => {\n          e.preventDefault();\n          const todo = {content, finished};\n          const response = await fetch(\"/api/todos\", {\n            method: \"POST\",\n            headers: {\n             \"Content-Type\": \"application/json\",\n             \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(todo)\n          });\n          if (response.ok) {\n            setContent(\"\");\n            onNewTodo();\n          }\n        }\n      }>\n        <div className=\"input-field\">\n          <label htmlFor=\"content\"/>\n          <input type=\"text\" id=\"content\" placeholder=\"Create a New Todo\" value={content} onChange={e => setContent(e.target.value)}/>\n        </div>\n\n        <div className=\"input-field\">\n          <button className=\"btn green darken-1 z-depth-0\">Create</button>\n        </div>\n      </form>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { TodoList } from './TodoList';\nimport { CreateTodo } from '../actions/CreateTodo';\n\n\n\n\nexport const Todos = () => {\n\n  const [todos, setTodos] = useState();\n\n  useEffect(() => {\n    fetch('/api/todos', {\n    \tmethod: \"GET\",\n    \theaders: {\n    \t\t\"Content-Type\": \"application/json\",\n    \t\t\"Accept\": \"application/json\"\n    \t}\n    }).then(resp => {\n      resp.json().then(data => {\n        setTodos(data.body)\n      })\n    })\n  }, [])\n\n\n  const view = todos ? (   \n      <TodoList todos={todos} setTodos={setTodos} />\n  ) : (  \n      <div className=\"center\">\n        <p>No Todos.. Yay!</p>\n      </div>\n  )\n\n  const OnNewTodo = async () => {\n    await fetch('/api/todos', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      }\n    }).then(resp => {\n      resp.json().then(data => {\n        setTodos(data.body)\n      })\n    })\n  }\n  \n  return (\n    <div className=\"wrapper\">\n      <div className=\"container\">\n        <div className=\"center\">\n          <CreateTodo onNewTodo={OnNewTodo}/>\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"center\">\n          <div className=\"col s12 m6\">\n            { view }\n          </div>\n        </div>\n      </div>\n    </div>\n\n  )\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport { Todos } from './components/Todos/Todos';\n\n\nclass App extends Component {\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n            <Navbar />\n            <Switch>\n              <Route exact path='/' component={Todos} />\n            </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}